#!/usr/bin/env python3
import logging
import sys

import ocrmypdf
from PyQt6.QtCore import QThread, pyqtSignal
from PyQt6.QtWidgets import *
from ocrmypdf import ExitCode, Verbosity


class ProgressbarLogHandler(logging.Handler):
    def __init__(self):
        super().__init__()

    def emit(self, record):
        m = record.getMessage()
        match m:
            case str() if "--list-langs" in m:
                mainWindow.update_progress(10, "Installierte Sprachen ermitteln")
            case str() if "Rasterize with" in m:
                mainWindow.update_progress(15, "Rasterisierung")
            case str() if "Rotating output" in m:
                mainWindow.update_progress(20, "PDF drehen")
            case str() if "Running: ['tesseract'" in m and "txt" in m:
                mainWindow.update_progress(30, "OCR")
            case str() if "Postprocessing..." in m:
                mainWindow.update_progress(85, "Postprocessing")
            case str() if "jbig2" in m:
                mainWindow.update_progress(90, "Kompression")
            case str() if "(as expected)" in m:
                mainWindow.update_progress(100, "Fertig")

ocrmypdflogger = logging.getLogger('ocrmypdf')
ocrmypdflogger.setLevel(logging.ERROR)
handler = ProgressbarLogHandler()
ocrmypdflogger.addHandler(handler)

class MainWindow(QDialog):
    def __init__(self, parent=None):
        super(MainWindow, self).__init__(parent)

        self.progressBar = None
        self.originalPalette = QApplication.palette()

        # Languages
        # TODO: more languages
        self.groupbox = QGroupBox("Sprachen")
        self.radio_deutsch = QCheckBox("Deutsch")
        self.radio_deutsch.setChecked(True)
        self.radio_englisch = QCheckBox("Englisch")
        self.radio_spanisch = QCheckBox("Spanisch")
        self.goButton = QPushButton("&Start")
        self.goButton.clicked.connect(start_clicked)

        # replace file checkbox
        self.replaceFile = QCheckBox("&Datei ersetzen")

        layout = QVBoxLayout()
        layout.addWidget(self.radio_deutsch)
        layout.addWidget(self.radio_englisch)
        layout.addWidget(self.radio_spanisch)
        layout.addStretch(1)
        self.groupbox.setLayout(layout)

        mainlayout = QGridLayout()
        mainlayout.addWidget(self.replaceFile)
        mainlayout.addWidget(self.groupbox, 1, 0)
        self.progress_text = QLabel("-")
        mainlayout.addWidget(self.progress_text)
        mainlayout.addWidget(self.createProgressBar())
        mainlayout.addWidget(self.goButton)
        mainlayout.setRowStretch(1, 1)
        mainlayout.setRowStretch(2, 1)
        mainlayout.setColumnStretch(0, 1)
        mainlayout.setColumnStretch(1, 1)
        self.setLayout(mainlayout)
        self.setWindowTitle("OCR")

        # Windows theme O_O
        # self.changeStyle('Windows')

    def change_style(self, stylename):
        QApplication.setStyle(QStyleFactory.create(stylename))
        self.change_palette()

    def change_palette(self):
        # Use standard color palette?
        QApplication.setPalette(QApplication.style().standardPalette())
        # QApplication.setPalette(self.originalPalette)

    # TODO: progress bar
    # FIXME: get intermediate status from OCRmyPDF process
    def createProgressBar(self):
        self.progressBar = QProgressBar()
        self.progressBar.setRange(0, 100)
        self.progressBar.setValue(0)
        return self.progressBar

    def update_progress(self, progress, message):
        self.progressBar.setValue(progress)
        self.progress_text.setText(message)

    def closeEvent(self, e):
        QApplication.instance().quit()
        sys.exit(0)

class OCRThread(QThread):
    finished = pyqtSignal(int)

    def __init__(self, input_file, output_file, languages):
        super().__init__()
        self.input_file = input_file
        self.output_file = output_file
        self.languages = languages

    def run(self):
        ocrmypdf.configure_logging(verbosity=Verbosity.default, progress_bar_friendly=True)
        try:
            statuscode = ocrmypdf.ocr(self.input_file, self.output_file, progress_bar=True, language=self.languages)
        except Exception as e:
            print(e)
            self.finished.emit(e)
        # FIXME
        if isinstance(statuscode, ExitCode):
            if statuscode.value != 0:
                self.finished.emit(statuscode.value if hasattr(statuscode, 'value') else e)
            else:
                self.finished.emit(0)
        else:
            self.finished.emit(0)

class OCRThreadManager:
    def __init__(self):
        self.thread = None

    def call_ocrmypdf(self):
        languages = []
        outputfile_string = sys.argv[1]
        if mainWindow.radio_deutsch.isChecked():
            languages.append('deu')
        if mainWindow.radio_englisch.isChecked():
            languages.append('eng')
        if mainWindow.radio_spanisch.isChecked():
            languages.append('spa')
        if not mainWindow.replaceFile.isChecked():
            outputfile_string = outputfile_string + '.ocr'
    
        self.thread = OCRThread(sys.argv[1], outputfile_string, languages)
        self.thread.finished.connect(self.handle_ocr_finished)
        self.thread.start()

    
    def handle_ocr_finished(self, exit_code_or_e):
        if isinstance(exit_code_or_e, Exception):
            kek = ErrorDialog(exit_code_or_e)
            kek.exec()
        if isinstance(exit_code_or_e, int):
            if exit_code_or_e == 0:
                sys.exit(0)
            else:
                kek = ErrorDialog(str(exit_code_or_e))
                kek.exec()
                self.thread.quit()
                self.thread.wait()
                self.thread = None


class ErrorDialog(QDialog):
    def __init__(self, status, parent=None):
        super().__init__(parent)

        self.setWindowTitle("Fehler")

        self.buttonBox = QDialogButtonBox(QDialogButtonBox.StandardButton.Ok)
        self.buttonBox.accepted.connect(self.accept)
        layout = QVBoxLayout()
        message = QLabel("OCRmyPDF wurde mit einem Fehler beendet. Status-Code: " + status)
        layout.addWidget(message)
        layout.addWidget(self.buttonBox)
        self.setSizeGripEnabled(True)
        self.setMinimumSize(0, 0)
        self.setLayout(layout)

def start_clicked():
    mainWindow.goButton.setText("l√§uft...")
    mainWindow.goButton.setEnabled(False)
    QApplication.processEvents() # force UI update
    global manager
    manager.call_ocrmypdf()
    manager.thread.quit()

manager = OCRThreadManager()

if __name__ == '__main__':
    app = QApplication([])
    mainWindow = MainWindow()
    mainWindow.show()
    sys.exit(app.exec())
